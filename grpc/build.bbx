import bibix
import maven
import jvm
import curl
from ".." import ktjvm
from ".." import protobuf

var grpcVersion = "1.53.0"
var kotlinPluginVersion = "1.3.0"

implTemplate = bibix.genRuleImplTemplateKt(
  rules = [
    java,
    kotlin,
    web,
  ],
  implName = "com.giyeok.bibix.plugins.grpc.CompileImpl",
  implInterfaceName = "com.giyeok.bibix.plugins.grpc.CompileInterface",
)

types = bibix.genTypesKt(
  types = [protobuf.ProtoSchema, protobuf.GeneratedSrcsSet],
  packageName = "com.giyeok.bibix.plugins.grpc",
)

impl = ktjvm.library(
  srcs = [
    ...implTemplate as list<file>,
    types,
    ...glob("src/**/*.kt"),
  ],
  deps = [bibix.base],
)

javaPlugin {
  def url(
    version: string,
    arch: Arch = env.arch,
  ): string = impl:com.giyeok.bibix.plugins.grpc.JavaPlugin:url

  def createEnv(pluginExe: file): file =
    impl:com.giyeok.bibix.plugins.grpc.JavaPlugin:createEnv
}

javaPluginEnv = javaPlugin.createEnv(curl.download(javaPlugin.url(grpcVersion)))

def java(
  schema: protobuf.ProtoSchema,
  protocPath: directory = protobuf.protocPath,
  pluginPath: file = javaPluginEnv,
): set<file> = impl:com.giyeok.bibix.plugins.grpc.Compile:java

kotlinPlugin {
  def url(version: string): string =
    impl:com.giyeok.bibix.plugins.grpc.KotlinPlugin:url

  def createEnv(pluginJar: file): file =
    impl:com.giyeok.bibix.plugins.grpc.KotlinPlugin:createEnv
}

kotlinPluginEnv = kotlinPlugin.createEnv(curl.download(kotlinPlugin.url(kotlinPluginVersion)))

def kotlin(
  schema: protobuf.ProtoSchema,
  protocPath: directory = protobuf.protocPath,
  pluginPath: file = kotlinPluginEnv,
): set<file> = impl:com.giyeok.bibix.plugins.grpc.Compile:kotlin

def web(
  schema: protobuf.ProtoSchema,
  protocPath: directory = protobuf.protocPath,
  pluginPath: file,
): set<file> = impl:com.giyeok.bibix.plugins.grpc.Compile:web
