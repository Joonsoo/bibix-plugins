package com.giyeok.bibix.plugins.cc

from bibix.plugins import ktjvm

var copts: list<string> = []
var pwd: path = "."

enum ObjType {
  StaticObj, SharedObj
}

class Library(
  objs: set<file>,
  objType: ObjType,
  hdrs: set<FilesWithRoot>,
  srcs?: set<file>,
  deps: list<Library>,
)

class FilesWithRoot(root: path, files: set<file>)

def library(
  srcs: set<file>,
  hdrs: list<file | FilesWithRoot> = [],
  deps: list<Library> = [],
  compilerCommand: string = "g++",
  pwd: path = pwd,
  copts: list<string> = copts,
): Library = impl:com.giyeok.bibix.plugins.cc.Compile:buildLibrary

class Binary(
  exec: file,
  srcs?: set<file>,
  sharedDeps: list<Library>,
)

def binary(
  srcs: set<file>,
  hdrs: list<file | FilesWithRoot> = [],
  deps: list<Library> = [],
  outname?: string,
  compilerCommand: string = "g++",
  pwd: path = pwd,
  copts: list<string> = copts,
): Binary = impl:com.giyeok.bibix.plugins.cc.Compile:buildBinary

implTmpl = bibix.genRuleImplTemplateKt(
  rules = [library, binary],
  implName = "com.giyeok.bibix.plugins.cc.CompileImpl",
  implInterfaceName = "com.giyeok.bibix.plugins.cc.CompileInterface",
)

implTypes = ktjvm.library(
  srcs = [bibix.genTypesKt(
    types = [Library, Binary, FilesWithRoot],
    packageName = "com.giyeok.bibix.plugins.cc",
  )],
  deps = [bibix.base],
)

impl = ktjvm.library(
  srcs = glob("src/**.kt"),
  deps = [bibix.base, implTypes],
)

import "test/abseil-cpp" as abseilcpp

test {
  helloworld = binary(
    srcs = ["test/hello.c"],
    deps = [abseilcpp.strings.strings],
  )

  // TODO: abslcpp @ test/abseil-cpp { .. }
  //       -> 이 namespace 안에선 base directory가 바뀌도록
  // TODO: abslcpp { import * from "test/abseil-cpp" }
}
